name: Daily E2E ST Tests Edge

on:
  schedule:
    - cron: '00 23 * * 5'
  workflow_dispatch:

env:
  ALPHA_TESTS_PATH: "%regex[.*ST.WFAT_.*]"
  BRAVO_TESTS_PATH: "%regex[.*ST.WFBT_.*]"
  CHARLIE_TESTS_PATH: "%regex[.*ST.WFCT_.*]"
  DELTA_TESTS_PATH: "%regex[.*ST.WFDT_.*]"
  ECHO_TESTS_PATH: ""
  FOXTROT_TESTS_PATH: "%regex[.*ST.WFFT_.*]"
  GOLF_TESTS_PATH: "%regex[.*ST.WFGT_.*]"
  HOTEL_TESTS_PATH: "%regex[.*ST.WFHT_.*]"

jobs:

  Alpha_ST_Edge_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Native Selenium Grid
        run: docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
      - name: Log Browser Version
        run: |
          BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
      - name: Check running containers
        run: docker ps
      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version
      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/
      - name: Run tests
        continue-on-error: true
        run: mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="microsoftedge" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${ALPHA_TESTS_PATH}"
      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Alpha_ST_Edge_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Rename Summary Report File and Content
        if: always()
        run: |
          DATE=$(date '+%Y-%m-%d')
          originalReportTitle='<h1>Alpha Execution Summary Report</h1>'
          browserTypeTitle='<h1>Alpha Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p>'
          cd execution-summary
          find . -type f -name 'ExecutionSummaryReport_*' -exec mv {} Alpha_ExecutionSummaryReport_$DATE.html \;
          sed -i 's/Execution Summary Report/Alpha Execution Summary Report/' Alpha_ExecutionSummaryReport_$DATE.html
          sed -i "s#$originalReportTitle#$browserTypeTitle#g" Alpha_ExecutionSummaryReport_$DATE.html
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Alpha_ST_Edge_Linux_Grid_Summary
          path: "execution-summary/Alpha_ExecutionSummaryReport_*.html"
      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Alpha_ST_Edge_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml

  Bravo_ST_Edge_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Native Selenium Grid
        run: docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
      - name: Log Browser Version
        run: |
          BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
      - name: Check running containers
        run: docker ps
      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version
      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/
      - name: Run tests
        continue-on-error: true
        run: mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="microsoftedge" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${BRAVO_TESTS_PATH}"
      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Bravo_ST_Edge_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Rename Summary Report File and Content
        if: always()
        run: |
          DATE=$(date '+%Y-%m-%d')
          originalReportTitle='<h1>Bravo Execution Summary Report</h1>'
          browserTypeTitle='<h1>Bravo Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p>'
          cd execution-summary
          find . -type f -name 'ExecutionSummaryReport_*' -exec mv {} Bravo_ExecutionSummaryReport_$DATE.html \;
          sed -i 's/Execution Summary Report/Bravo Execution Summary Report/' Bravo_ExecutionSummaryReport_$DATE.html
          sed -i "s#$originalReportTitle#$browserTypeTitle#g" Bravo_ExecutionSummaryReport_$DATE.html
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Bravo_ST_Edge_Linux_Grid_Summary
          path: "execution-summary/Bravo_ExecutionSummaryReport_*.html"
      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Bravo_ST_Edge_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml

  Charlie_ST_Edge_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Native Selenium Grid
        run: docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
      - name: Log Browser Version
        run: |
          BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
      - name: Check running containers
        run: docker ps
      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version
      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/
      - name: Run tests
        continue-on-error: true
        run: mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="microsoftedge" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${CHARLIE_TESTS_PATH}"
      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Charlie_ST_Edge_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Rename Summary Report File and Content
        if: always()
        run: |
          DATE=$(date '+%Y-%m-%d')
          originalReportTitle='<h1>Charlie Execution Summary Report</h1>'
          browserTypeTitle='<h1>Charlie Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p>'
          cd execution-summary
          find . -type f -name 'ExecutionSummaryReport_*' -exec mv {} Charlie_ExecutionSummaryReport_$DATE.html \;
          sed -i 's/Execution Summary Report/Charlie Execution Summary Report/' Charlie_ExecutionSummaryReport_$DATE.html
          sed -i "s#$originalReportTitle#$browserTypeTitle#g" Charlie_ExecutionSummaryReport_$DATE.html
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Charlie_ST_Edge_Linux_Grid_Summary
          path: "execution-summary/Charlie_ExecutionSummaryReport_*.html"
      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Charlie_ST_Edge_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml

  Delta_eCare_ST_Edge_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Native Selenium Grid
        run: docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
      - name: Log Browser Version
        run: |
          BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
      - name: Check running containers
        run: docker ps
      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version
      - name: Check maven version
        run: mvn -v
      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/
      - name: Run tests
        continue-on-error: true
        run: mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="microsoftedge" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${DELTA_TESTS_PATH}" -Dgroups="eCare"
      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Delta_eCare_ST_Edge_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Rename Summary Report File and Content
        if: always()
        run: |
          DATE=$(date '+%Y-%m-%d')
          originalReportTitle='<h1>Delta eCare Execution Summary Report</h1>'
          browserTypeTitle='<h1>Delta eCare Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p>'
          cd execution-summary
          find . -type f -name 'ExecutionSummaryReport_*' -exec mv {} Delta_eCare_ExecutionSummaryReport_$DATE.html \;
          sed -i 's/Execution Summary Report/Delta eCare Execution Summary Report/' Delta_eCare_ExecutionSummaryReport_$DATE.html
          sed -i "s#$originalReportTitle#$browserTypeTitle#g" Delta_eCare_ExecutionSummaryReport_$DATE.html
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Delta_eCare_ST_Edge_Linux_Grid_Summary
          path: "execution-summary/Delta_eCare_ExecutionSummaryReport_*.html"
      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Delta_eCare_ST_Edge_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml

  Echo_ST_Edge_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Native Selenium Grid
        run: docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
      - name: Log Browser Version
        run: |
          BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
      - name: Check running containers
        run: docker ps
      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version
      - name: Check maven version
        run: mvn -v
      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/
      - name: Run tests
        continue-on-error: true
        run: mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="microsoftedge" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${ECHO_TESTS_PATH}"
      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Echo_ST_Edge_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Rename Summary Report File and Content
        if: always()
        run: |
          DATE=$(date '+%Y-%m-%d')
          originalReportTitle='<h1>Echo Execution Summary Report</h1>'
          browserTypeTitle='<h1>Echo Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p>'
          cd execution-summary
          find . -type f -name 'ExecutionSummaryReport_*' -exec mv {} Echo_ExecutionSummaryReport_$DATE.html \;
          sed -i 's/Execution Summary Report/Echo Execution Summary Report/' Echo_ExecutionSummaryReport_$DATE.html
          sed -i "s#$originalReportTitle#$browserTypeTitle#g" Echo_ExecutionSummaryReport_$DATE.html
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Echo_ST_Edge_Linux_Grid_Summary
          path: "execution-summary/Echo_ExecutionSummaryReport_*.html"
      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Echo_ST_Edge_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml

  Foxtrot_ST_Edge_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Native Selenium Grid
        run: docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
      - name: Log Browser Version
        run: |
          BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
      - name: Check running containers
        run: docker ps
      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version
      - name: Check maven version
        run: mvn -v
      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/
      - name: Run tests
        continue-on-error: true
        run: mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="microsoftedge" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${FOXTROT_TESTS_PATH}"
      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Foxtrot_ST_Edge_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Rename Summary Report File and Content
        if: always()
        run: |
          DATE=$(date '+%Y-%m-%d')
          originalReportTitle='<h1>Foxtrot Execution Summary Report</h1>'
          browserTypeTitle='<h1>Foxtrot Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p>'
          cd execution-summary
          find . -type f -name 'ExecutionSummaryReport_*' -exec mv {} Foxtrot_ExecutionSummaryReport_$DATE.html \;
          sed -i 's/Execution Summary Report/Foxtrot Execution Summary Report/' Foxtrot_ExecutionSummaryReport_$DATE.html
          sed -i "s#$originalReportTitle#$browserTypeTitle#g" Foxtrot_ExecutionSummaryReport_$DATE.html
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Foxtrot_ST_Edge_Linux_Grid_Summary
          path: "execution-summary/Foxtrot_ExecutionSummaryReport_*.html"
      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Foxtrot_ST_Edge_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml

  Golf_ST_Edge_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Native Selenium Grid
        run: docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
      - name: Log Browser Version
        run: |
          BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
      - name: Check running containers
        run: docker ps
      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version
      - name: Check maven version
        run: mvn -v
      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/
      - name: Run tests
        continue-on-error: true
        run: mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="microsoftedge" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${GOLF_TESTS_PATH}"
      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Golf_ST_Edge_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Rename Summary Report File and Content
        if: always()
        run: |
          DATE=$(date '+%Y-%m-%d')
          originalReportTitle='<h1>Golf Execution Summary Report</h1>'
          browserTypeTitle='<h1>Golf Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p>'
          cd execution-summary
          find . -type f -name 'ExecutionSummaryReport_*' -exec mv {} Golf_ExecutionSummaryReport_$DATE.html \;
          sed -i 's/Execution Summary Report/Golf Execution Summary Report/' Golf_ExecutionSummaryReport_$DATE.html
          sed -i "s#$originalReportTitle#$browserTypeTitle#g" Golf_ExecutionSummaryReport_$DATE.html
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Golf_ST_Edge_Linux_Grid_Summary
          path: "execution-summary/Golf_ExecutionSummaryReport_*.html"
      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Golf_ST_Edge_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml

  Hotel_ST_Edge_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Native Selenium Grid
        run: docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
      - name: Log Browser Version
        run: |
          BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
      - name: Check running containers
        run: docker ps
      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true
      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version
      - name: Check maven version
        run: mvn -v
      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/
      - name: Run tests
        continue-on-error: true
        run: mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="microsoftedge" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${HOTEL_TESTS_PATH}"
      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Hotel_ST_Edge_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Rename Summary Report File and Content
        if: always()
        run: |
          DATE=$(date '+%Y-%m-%d')
          originalReportTitle='<h1>Hotel Execution Summary Report</h1>'
          browserTypeTitle='<h1>Hotel Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p>'
          cd execution-summary
          find . -type f -name 'ExecutionSummaryReport_*' -exec mv {} Hotel_ExecutionSummaryReport_$DATE.html \;
          sed -i 's/Execution Summary Report/Hotel Execution Summary Report/' Hotel_ExecutionSummaryReport_$DATE.html
          sed -i "s#$originalReportTitle#$browserTypeTitle#g" Hotel_ExecutionSummaryReport_$DATE.html
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Hotel_ST_Edge_Linux_Grid_Summary
          path: "execution-summary/Hotel_ExecutionSummaryReport_*.html"
      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Hotel_ST_Edge_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml

  Consolidated-Report_and_Send-Mail:
    runs-on: [ self-hosted, wfc ]
    if: always()
    needs: [ Alpha_ST_Edge_Linux_Grid, Bravo_ST_Edge_Linux_Grid, Charlie_ST_Edge_Linux_Grid, Delta_eCare_ST_Edge_Linux_Grid, Echo_ST_Edge_Linux_Grid, Foxtrot_ST_Edge_Linux_Grid, Golf_ST_Edge_Linux_Grid, Hotel_ST_Edge_Linux_Grid ]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Alpha - Download Summary report artifacts
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: Alpha_ST_Edge_Linux_Grid_Summary
      - name: Bravo - Download Summary report artifacts
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: Bravo_ST_Edge_Linux_Grid_Summary
      - name: Charlie - Download Summary report artifacts
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: Charlie_ST_Edge_Linux_Grid_Summary
      - name: Delta_eCare - Download Summary report artifacts
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: Delta_eCare_ST_Edge_Linux_Grid_Summary
      - name: Echo - Download Summary report artifacts
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: Echo_ST_Edge_Linux_Grid_Summary
      - name: Foxtrot - Download Summary report artifacts
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: Foxtrot_ST_Edge_Linux_Grid_Summary
      - name: Golf - Download Summary report artifacts
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: Golf_ST_Edge_Linux_Grid_Summary
      - name: Hotel - Download Summary report artifacts
        if: always()
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: Hotel_ST_Edge_Linux_Grid_Summary
      - name: List artifacts directory
        if: always()
        run: ls -R
      - name: Consolidated Summary Report
        if: always()
        run: |
          TOTAL_CASES=0
          PASSED_CASES=0
          FAILED_CASES=0
          SKIPPED_CASES=0
          
          TOTAL_VALIDATIONS=0
          PASSED_VALIDATIONS=0
          FAILED_VALIDATIONS=0
          
          TOTAL_ISSUES=0
          NO_FAILED_ISSUES=0
          PASSED_ISSUES=0
          FAILED_ISSUES=0
          
          for f in *ExecutionSummaryReport*.html; do
            FILE_TOTAL_CASES=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' $f)" | tr -dc '0-9')
            echo file total cases $FILE_TOTAL_CASES
            TOTAL_CASES=$((TOTAL_CASES+FILE_TOTAL_CASES))
            echo "TOTAL_CASES=$((TOTAL_CASES))" >> "$GITHUB_ENV"
            FILE_PASSED_CASES=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' $f)" | tr -dc '0-9')
            echo file passed cases $FILE_PASSED_CASES
            PASSED_CASES=$((PASSED_CASES+FILE_PASSED_CASES))
            echo "PASSED_CASES=$((PASSED_CASES))" >> "$GITHUB_ENV"
            FILE_FAILED_CASES=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' $f)" | tr -dc '0-9')
            echo file failed cases $FILE_FAILED_CASES
            FAILED_CASES=$((FAILED_CASES+FILE_FAILED_CASES))
            echo "FAILED_CASES=$((FAILED_CASES))" >> "$GITHUB_ENV"
            FILE_SKIPPED_CASES=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' $f)" | tr -dc '0-9')
            echo file skipped cases $FILE_SKIPPED_CASES
            SKIPPED_CASES=$((SKIPPED_CASES+FILE_SKIPPED_CASES))
            echo "SKIPPED_CASES=$((SKIPPED_CASES))" >> "$GITHUB_ENV"
            
            FILE_TOTAL_VALIDATIONS=$(echo "$(grep -Po '<b>Total Executed Validations</b>:&nbsp(\d+)&nbsp' $f)" | tr -dc '0-9')
            echo file total validations $FILE_TOTAL_VALIDATIONS
            TOTAL_VALIDATIONS=$((TOTAL_VALIDATIONS+FILE_TOTAL_VALIDATIONS))
            FILE_PASSED_VALIDATIONS=$(echo "$(grep -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' $f | tail -n1)" | tr -dc '0-9')
            echo file passed validations $FILE_PASSED_VALIDATIONS
            PASSED_VALIDATIONS=$((PASSED_VALIDATIONS+FILE_PASSED_VALIDATIONS))
            FILE_FAILED_VALIDATIONS=$(echo "$(grep -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' $f | tail -n1)" | tr -dc '0-9')
            echo file failed validations $FILE_FAILED_VALIDATIONS
            FAILED_VALIDATIONS=$((FAILED_VALIDATIONS+FILE_FAILED_VALIDATIONS))

            FILE_TOTAL_ISSUES=$(echo "$(grep -Po '<b>Total Issues</b>:&nbsp(\d+)&nbsp' $f)" | tr -dc '0-9')
            echo file total issues $FILE_TOTAL_ISSUES
            TOTAL_ISSUES=$((TOTAL_ISSUES+FILE_TOTAL_ISSUES))
            FILE_NO_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that should Pass:</b>&nbsp(\d+)</font>&nbsp' $f)" | tr -dc '0-9')
            echo file no open issues for failed tests $FILE_NO_FAILED_ISSUES
            NO_FAILED_ISSUES=$((NO_FAILED_ISSUES+FILE_NO_FAILED_ISSUES))
            FILE_PASSED_ISSUES=$(echo "$(grep -Po '<b>Tests Resolved:</b>&nbsp(\d+)</font>&nbsp' $f)" | tr -dc '0-9')
            echo file open issues for passed tests $FILE_PASSED_ISSUES
            PASSED_ISSUES=$((PASSED_ISSUES+FILE_PASSED_ISSUES))
            FILE_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' $f)" | tr -dc '0-9')
            echo file open issues for failed tests $FILE_PASSED_ISSUES
            FAILED_ISSUES=$((FAILED_ISSUES+FILE_FAILED_ISSUES))
          done
          
          echo Total Cases $TOTAL_CASES
          echo Passed Cases $PASSED_CASES
          echo Failed Cases $FAILED_CASES
          echo Skipped Cases $SKIPPED_CASES
          
          echo Total Validations $TOTAL_VALIDATIONS
          echo Passed Validations $PASSED_VALIDATIONS
          echo Failed Validations $FAILED_VALIDATIONS
          
          echo Total Issues $TOTAL_ISSUES
          echo No Open issues for Failed Tests $NO_FAILED_ISSUES
          echo Open issues for Passed Tests $PASSED_ISSUES
          echo Open issues for Failed Tests $FAILED_ISSUES
          
          PASSED_PERCENTAGE=$(( $PASSED_CASES*100/$TOTAL_CASES ))
          echo passed percentage $PASSED_PERCENTAGE
          echo "PASSED_PERCENTAGE=$((PASSED_PERCENTAGE))" >> "$GITHUB_ENV"
          FAILED_PERCENTAGE=$(( $FAILED_CASES*100/$TOTAL_CASES ))
          FAILED_PERCENTAGE_PIE=$(( PASSED_PERCENTAGE + FAILED_PERCENTAGE ))
          
          PASSED_VALIDATIONS_PERCENTAGE=$(( $PASSED_VALIDATIONS*100/$TOTAL_VALIDATIONS ))
          
          if ! ls Alpha_ExecutionSummaryReport_*.html 1> /dev/null 2>&1; then
          echo "Alpha Execution Summary Report file does not exist."
          ALPHA_TOTAL=0
          ALPHA_PASSED=0
          ALPHA_FAILED=0
          ALPHA_SKIPPED=0
          ALPHA_PASS_PERCENTAGE=0
          ALPHA_FAILED_ISSUES=0
          else
          ALPHA_TOTAL=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' Alpha_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          ALPHA_PASSED=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' Alpha_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          ALPHA_FAILED=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' Alpha_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          ALPHA_SKIPPED=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' Alpha_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          ALPHA_PASS_PERCENTAGE=$(( $ALPHA_PASSED*100/$ALPHA_TOTAL ))
          ALPHA_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' Alpha_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          fi
          
          if ! ls Bravo_ExecutionSummaryReport_*.html 1> /dev/null 2>&1; then
          echo "Bravo Execution Summary Report file does not exist."
          BRAVO_TOTAL=0
          BRAVO_PASSED=0
          BRAVO_FAILED=0
          BRAVO_SKIPPED=0
          BRAVO_PASS_PERCENTAGE=0
          BRAVO_FAILED_ISSUES=0
          else
          BRAVO_TOTAL=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' Bravo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          BRAVO_PASSED=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' Bravo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          BRAVO_FAILED=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' Bravo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          BRAVO_SKIPPED=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' Bravo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          BRAVO_PASS_PERCENTAGE=$(( $BRAVO_PASSED*100/$BRAVO_TOTAL ))
          BRAVO_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' Bravo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          fi
          
          if ! ls Charlie_ExecutionSummaryReport_*.html 1> /dev/null 2>&1; then
          echo "Charlie Execution Summary Report file does not exist."
          CHARLIE_TOTAL=0
          CHARLIE_PASSED=0
          CHARLIE_FAILED=0
          CHARLIE_SKIPPED=0
          CHARLIE_PASS_PERCENTAGE=0
          CHARLIE_FAILED_ISSUES=0
          else
          CHARLIE_TOTAL=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' Charlie_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          CHARLIE_PASSED=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' Charlie_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          CHARLIE_FAILED=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' Charlie_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          CHARLIE_SKIPPED=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' Charlie_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          CHARLIE_PASS_PERCENTAGE=$(( $CHARLIE_PASSED*100/$CHARLIE_TOTAL ))
          CHARLIE_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' Charlie_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          fi
          
          if ! ls Delta_eCare_ExecutionSummaryReport_*.html 1> /dev/null 2>&1; then
          echo "Delta_eCare Execution Summary Report file does not exist."
          DELTA_eCare_TOTAL=0
          DELTA_eCare_PASSED=0
          DELTA_eCare_FAILED=0
          DELTA_eCare_SKIPPED=0
          DELTA_eCare_PASS_PERCENTAGE=0
          DELTA_eCare_FAILED_ISSUES=0
          else
          DELTA_eCare_TOTAL=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' Delta_eCare_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          DELTA_eCare_PASSED=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' Delta_eCare_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          DELTA_eCare_FAILED=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' Delta_eCare_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          DELTA_eCare_SKIPPED=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' Delta_eCare_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          DELTA_eCare_PASS_PERCENTAGE=$(( $DELTA_eCare_PASSED*100/$DELTA_eCare_TOTAL ))
          DELTA_eCare_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' Delta_eCare_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          fi
          
          if ! ls Echo_ExecutionSummaryReport_*.html 1> /dev/null 2>&1; then
          echo "Echo Execution Summary Report file does not exist."
          ECHO_TOTAL=0
          ECHO_PASSED=0
          ECHO_FAILED=0
          ECHO_SKIPPED=0
          ECHO_PASS_PERCENTAGE=0
          ECHO_FAILED_ISSUES=0
          else
          ECHO_TOTAL=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' Echo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          ECHO_PASSED=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' Echo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          ECHO_FAILED=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' Echo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          ECHO_SKIPPED=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' Echo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          ECHO_PASS_PERCENTAGE=$(( $ECHO_PASSED*100/$ECHO_TOTAL ))
          ECHO_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' Echo_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          fi
          
          if ! ls Foxtrot_ExecutionSummaryReport_*.html 1> /dev/null 2>&1; then
          echo "Foxtrot Execution Summary Report file does not exist."
          FOXTROT_TOTAL=0
          FOXTROT_PASSED=0
          FOXTROT_FAILED=0
          FOXTROT_SKIPPED=0
          FOXTROT_PASS_PERCENTAGE=0
          FOXTROT_FAILED_ISSUES=0
          else
          FOXTROT_TOTAL=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' Foxtrot_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          FOXTROT_PASSED=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' Foxtrot_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          FOXTROT_FAILED=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' Foxtrot_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          FOXTROT_SKIPPED=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' Foxtrot_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          FOXTROT_PASS_PERCENTAGE=$(( $FOXTROT_PASSED*100/$FOXTROT_TOTAL ))
          FOXTROT_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' Foxtrot_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          fi
          
          if ! ls Golf_ExecutionSummaryReport_*.html 1> /dev/null 2>&1; then
          echo "Golf Execution Summary Report file does not exist."
          GOLF_TOTAL=0
          GOLF_PASSED=0
          GOLF_FAILED=0
          GOLF_SKIPPED=0
          GOLF_PASS_PERCENTAGE=0
          GOLF_FAILED_ISSUES=0
          else
          GOLF_TOTAL=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' Golf_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          GOLF_PASSED=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' Golf_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          GOLF_FAILED=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' Golf_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          GOLF_SKIPPED=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' Golf_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          GOLF_PASS_PERCENTAGE=$(( $GOLF_PASSED*100/$GOLF_TOTAL ))
          GOLF_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' Golf_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          fi
          
          if ! ls Hotel_ExecutionSummaryReport_*.html 1> /dev/null 2>&1; then
          echo "Hotel Execution Summary Report file does not exist."
          HOTEL_TOTAL=0
          HOTEL_PASSED=0
          HOTEL_FAILED=0
          HOTEL_SKIPPED=0
          HOTEL_PASS_PERCENTAGE=0
          HOTEL_FAILED_ISSUES=0
          else
          HOTEL_TOTAL=$(echo "$(grep -Po '<b>Total Test Cases</b>:&nbsp(\d+)&nbsp' Hotel_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          HOTEL_PASSED=$(echo "$(grep -m1 -Po '<b>Passed:</b>&nbsp(\d+)</font>&nbsp' Hotel_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          HOTEL_FAILED=$(echo "$(grep -m1 -Po '<b>Failed:</b>&nbsp(\d+)</font>&nbsp' Hotel_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          HOTEL_SKIPPED=$(echo "$(grep -m1 -Po '<b>Skipped:</b>&nbsp(\d+)</font>&nbsp' Hotel_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          HOTEL_PASS_PERCENTAGE=$(( $HOTEL_PASSED*100/$HOTEL_TOTAL ))
          HOTEL_FAILED_ISSUES=$(echo "$(grep -Po '<b>Tests that Fail as Expected:</b>&nbsp(\d+)</font>&nbsp' Hotel_ExecutionSummaryReport_*.html)" | tr -dc '0-9')
          fi
          
          REPORT_DATE=$(date '+%Y/%m/%d')
          FILE_DATE=$(date '+%Y-%m-%d')
          touch Consolidated_ExecutionSummaryReport_$FILE_DATE.html
          echo "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content= \"width=device-width, initial-scale=1.0\"><title>Consolidated Test Automation Execution Summary Report</title><link rel=\"stylesheet\" type=\"text/css\" href=\"https://colorlib.com/etc/tb/Table_Fixed_Header/vendor/bootstrap/css/bootstrap.min.css\"><br><script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script><style>body{background-color:#e9edf1}.content{max-width:1400px;margin:auto;background-color:white}.piechart{display:block;position:relative;width:220px;height:220px;border-radius:50%;background-image:conic-gradient( MediumSeaGreen 0.00% $PASSED_PERCENTAGE%, Tomato $PASSED_PERCENTAGE% $FAILED_PERCENTAGE_PIE%, Orange $FAILED_PERCENTAGE_PIE%);}#logo{margin:0 15px 0 0}body,.piechart{display:block;justify-content:center;align-items:center}.table100 .ps__rail-y{ width:9px; background-color:transparent; opacity:1!important; right:5px } .table100 .ps__rail-y::before{ content:""; display: block; position: relative; background-color:#ebebeb; border-radius:5px; width:100%; height:calc(100% - 30px); left:0; top:15px } .table100 .ps__rail-y .ps__thumb-y{ width:100%; right:0; background-color:transparent; opacity:1!important } .table100 .ps__rail-y .ps__thumb-y::before{ content:""; display: block; position: relative; background-color:#ccc; border-radius:5px; width:100%; height:calc(100% - 30px); left:0; top:15px } .limiter{ width:100%; margin:0 auto } .container-table100{ width:100%; min-height:100%; background:#fff; align-items:center; justify-content:center; } .wrap-table100{ width:75% } .table100{ background-color:#fff } table{ width:100% } th,td{ font-weight:unset; padding-right:10px; padding-left:30px } th{ position: sticky; top: 0 } .table100-head th{ padding-top:18px; padding-bottom:18px } .table100-body td{ padding-top:16px; padding-bottom:16px } .table100{ position: relative; padding-top:15px; padding-bottom:60px } .table100-head{ position: relative; width:100%; top:0; left:0 } .table100-body{ max-height:585px; overflow:auto } .table100.ver5{ margin-right:-30px } .table100.ver5 .table100-head{ padding-right:30px } .table100.ver5 th{ font-family: Roboto,sans-serif; font-size:14px; font-weight: bold; color:#555; line-height:1.4; background-color:white; padding-top:25px; padding-bottom:10px } .table100.ver5 td{ font-family: Roboto,sans-serif; font-size:15px; color:gray; line-height:1.4; background-color:#f7f7f7 } .table100.ver5 .table100-body tr{ overflow:hidden; border-bottom:10px solid #fff; border-radius:10px } .table100.ver5 .table100-body table{ border-collapse:separate; border-spacing:0 10px } .table100.ver5 .table100-body td{ border:solid 1px transparent; border-style:solid none; padding-top:10px; padding-bottom:10px } .table100.ver5 .table100-body td:first-child{ border-left-style:solid; border-top-left-radius:10px; border-bottom-left-radius:10px } .table100.ver5 .table100-body td:last-child{ border-right-style:solid; border-bottom-right-radius:10px; border-top-right-radius:10px } .table100.ver5 tr:hover td{ background-color:#ebebeb; cursor:pointer } .table100.ver5{ overflow:hidden } .table100.ver5 .table100-body{ padding-right:30px } .table100.ver5 .ps__rail-y{ right:0 } .table100.ver5 .ps__rail-y::before{ background-color:#ebebeb } .table100.ver5 .ps__rail-y .ps__thumb-y::before{ background-color:#ccc }hr.rounded{border-top:8px solid #bbb;border-radius:5px;margin-left:35px;margin-right:35px}hr.rounded1{border-top:2px solid #bbb;border-radius:2px;margin-left:35px;margin-right:35px}.rcorner{border-radius:10px;border:1px solid #696969;padding-left:15px}.issue{margin-left:50px;margin-right:50px}</style></head><body><center><a href=\"https://shafthq.github.io/\" target=\"_blank\"><img src=\"https://github.com/ShaftHQ/SHAFT_ENGINE/raw/main/src/main/resources/images/shaft.png\" alt=\"SHAFT logo\" height=\"100\" id=\"logo\"></a><h1>Consolidated Test Automation Execution Summary Report</h1><p> Browser: <b>Microsoft Edge</b></p><div class=\"content\"><h2 style=\"clear:both;padding-top:15px;margin-bottom:3px\">$REPORT_DATE</h2><br><div style=\"border:1px solid Grey\" class=\"piechart\"></div><br><h2>$PASSED_PERCENTAGE% Passed</h2><br><br><h3><b>Total Test Cases</b>:&nbsp$TOTAL_CASES&nbsp&nbsp[ <font style=\"color:MediumSeaGreen\"><b>Passed:</b>&nbsp$PASSED_CASES</font>&nbsp| <font style=\"color:Tomato\"><b>Failed:</b>&nbsp$FAILED_CASES</font>&nbsp| <font style=\"color:Orange\"><b>Skipped:</b>&nbsp$SKIPPED_CASES</font>&nbsp] </h3><br><font style=\"color:Tomato\"><b>Out of the $FAILED_CASES Failed Test Cases $FAILED_ISSUES Test Cases failed due to Known Open Defects.</b></font><br><font style="color:Tomato"><b>*The remaining $((FAILED_CASES - FAILED_ISSUES)) Failed Test Cases are under investigation and might be caused by network issues or script issues.</b></font><hr class=\"rounded1\"><br><div class=\"limiter\"> <div class=\"container-table100\"> <div class=\"wrap-table100\"> <div class=\"table100 ver5 m-b-110\"> <div class=\"table100-head\"><h3 style=\"display:inline;\">Execution Summary Table</h3><br> <div class=\"table100-body js-pscroll ps ps--active-y\"> <table> <thead> <tr class=\"row100 head\"> <th class=\"cell100 column1\">Squad</th> <th class=\"cell100 column2\">Total TCs</th> <th class=\"cell100 column3\">Passed TCs</th> <th class=\"cell100 column4\">Failed TCs</th> <th class=\"cell100 column5\">Skipped TCs</th> <th class=\"cell100 column6\">Pass percentage</th> <th class=\"cell100 column8\">Failed TCs due to Known Defects</th> </tr> </thead> <tbody> <tr> <td>Alpha</td> <td>$ALPHA_TOTAL</td> <td>$ALPHA_PASSED</td> <td>$ALPHA_FAILED</td> <td>$ALPHA_SKIPPED</td> <td>$ALPHA_PASS_PERCENTAGE%</td> <td>$ALPHA_FAILED_ISSUES</td> </tr> <tr> <td>Bravo</td> <td>$BRAVO_TOTAL</td> <td>$BRAVO_PASSED</td> <td>$BRAVO_FAILED</td> <td>$BRAVO_SKIPPED</td> <td>$BRAVO_PASS_PERCENTAGE%</td> <td>$BRAVO_FAILED_ISSUES</td> </tr> <tr> <td>Charlie</td> <td>$CHARLIE_TOTAL</td> <td>$CHARLIE_PASSED</td> <td>$CHARLIE_FAILED</td> <td>$CHARLIE_SKIPPED</td> <td>$CHARLIE_PASS_PERCENTAGE%</td> <td>$CHARLIE_FAILED_ISSUES</td> </tr> <tr> <td>Delta_eCare</td> <td>$DELTA_eCare_TOTAL</td> <td>$DELTA_eCare_PASSED</td> <td>$DELTA_eCare_FAILED</td> <td>$DELTA_eCare_SKIPPED</td> <td>$DELTA_eCare_PASS_PERCENTAGE%</td> <td>$DELTA_eCare_FAILED_ISSUES</td> </tr> <tr> <td>Echo</td> <td>$ECHO_TOTAL</td> <td>$ECHO_PASSED</td> <td>$ECHO_FAILED</td> <td>$ECHO_SKIPPED</td> <td>$ECHO_PASS_PERCENTAGE%</td> <td>$ECHO_FAILED_ISSUES</td> </tr> <tr> <td>Foxtrot</td> <td>$FOXTROT_TOTAL</td> <td>$FOXTROT_PASSED</td> <td>$FOXTROT_FAILED</td> <td>$FOXTROT_SKIPPED</td> <td>$FOXTROT_PASS_PERCENTAGE%</td> <td>$FOXTROT_FAILED_ISSUES</td> </tr> <tr> <td>Golf</td> <td>$GOLF_TOTAL</td> <td>$GOLF_PASSED</td> <td>$GOLF_FAILED</td> <td>$GOLF_SKIPPED</td> <td>$GOLF_PASS_PERCENTAGE%</td> <td>$GOLF_FAILED_ISSUES</td> </tr> <tr> <td>Hotel</td> <td>$HOTEL_TOTAL</td> <td>$HOTEL_PASSED</td> <td>$HOTEL_FAILED</td> <td>$HOTEL_SKIPPED</td> <td>$HOTEL_PASS_PERCENTAGE%</td> <td>$HOTEL_FAILED_ISSUES</td> </tr> <tr> <td> <font style=\"color:Black\"> <b>Total<b></font> </td> <td> <font style=\"color:Black\"> <b>$TOTAL_CASES<b></font> </td> <td> <font style=\"color:Black\"> <b>$PASSED_CASES<b></font> </td> <td> <font style=\"color:Black\"> <b>$FAILED_CASES<b></font> </td> <td> <font style=\"color:Black\"> <b>$SKIPPED_CASES<b></font> </td> <td> <font style=\"color:Black\"> <b>$PASSED_PERCENTAGE%<b></font> </td> <td> <font style=\"color:Black\"> <b>$FAILED_ISSUES<b></font> </td> </tr> </tbody> </table><div class=\"ps__rail-x\" style=\"left:0px;bottom:0px\"><div class=\"ps__thumb-x\" tabindex=\"0\" style=\"left:0px;width:0px\"></div></div></div><br></div></div></div><h6>Visit <a href=\"https://shafthq.github.io/\" target=\"_blank\">SHAFT's user guide</a> to learn more about the engine and its capabilities.<h6/></div><br><br></div></center></body></html>" >> Consolidated_ExecutionSummaryReport_$FILE_DATE.html
        shell: bash
      - name: List artifacts directory
        if: always()
        run: ls -R
      - name: Upload Consolidated Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Consolidated_ST_Edge_Linux_Grid_Summary
          path: "Consolidated_ExecutionSummaryReport_*.html"

      - name: Pass Execution Results
        run: |
          sed -i "s#BROWSER_TYPE#Microsoft Edge#g" send_mail_daily_pipeline.py 
          sed -i "s#TOTAL_CASES_NUM#${TOTAL_CASES}#g" send_mail_daily_pipeline.py
          sed -i "s#TOTAL_PASSED_CASES#${PASSED_CASES}#g" send_mail_daily_pipeline.py
          sed -i "s#TOTAL_FAILED_CASES#${FAILED_CASES}#g" send_mail_daily_pipeline.py
          sed -i "s#TOTAL_SKIPPED_CASES#${SKIPPED_CASES}#g" send_mail_daily_pipeline.py
          sed -i "s#PASSING_RATE#${PASSED_PERCENTAGE}#g" send_mail_daily_pipeline.py

      - name: Move reports
        if: always()
        run: |
          ls
          mkdir execution-summary
          mv *.html execution-summary/
          ls
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: List artifacts directory
        run: ls
      - name: Send Mail
        run: python3 send_mail_daily_pipeline.py
