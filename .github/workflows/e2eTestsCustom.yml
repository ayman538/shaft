name: E2E Tests Custom

on:
  workflow_dispatch:
    inputs:
      targetBrowser:
        description: 'Choose Target Browser'
        default: 'chrome'
        type: choice
        options:
          - firefox
          - chrome
          - microsoftedge
      testsPath:
        description: 'Path to Tests to be Executed'
        default: ''

env:
  ALPHA_TESTS_PATH: "%regex[.*ST.WFAT_.*]"
  BRAVO_TESTS_PATH: "%regex[.*ST.WFBT_.*]"
  CHARLIE_TESTS_PATH: "%regex[.*ST.WFCT_.*]"
  DELTA_TESTS_PATH: "%regex[.*ST.WFDT_.*]"
  ECHO_TESTS_PATH: "%regex[.*ST.WFET_.*]"
  FOXTROT_TESTS_PATH: "%regex[.*ST.WFFT_.*]"
  GOLF_TESTS_PATH: "%regex[.*ST.WFGT_.*]"
  HOTEL_TESTS_PATH: "%regex[.*ST.WFHT_.*]"

jobs:
  Custom_Linux_Grid:
    runs-on: [ self-hosted, wfc ]
    timeout-minutes: 600
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log Tests Path
        run: echo ${{ github.event.inputs.testsPath }}

      - name: Set up Native Selenium Grid
        run: |
          if [ '${{ github.event.inputs.targetBrowser }}' == 'firefox' ]; then
            docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=0 --scale firefox=4 -d --force-recreate
          elif [ '${{ github.event.inputs.targetBrowser }}' == 'chrome' ]; then
            docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=4 --scale edge=0 --scale firefox=0 -d --force-recreate
          elif [ '${{ github.event.inputs.targetBrowser }}' == 'microsoftedge' ]; then
            docker-compose -f src/main/resources/docker-compose/selenium4.yml up --scale chrome=0 --scale edge=4 --scale firefox=0 -d --force-recreate
          else
            echo "Browser not supported"
          fi

      - name: Log Browser Version
        run: |
          if [ '${{ github.event.inputs.targetBrowser }}' == 'firefox' ]; then
            BROWSER_VERSION=$(docker run --rm selenium/node-firefox:4.16.1-20231212 firefox --version | awk "{print \$3}")
            echo "Firefox Browser Version: $BROWSER_VERSION"
          elif [ '${{ github.event.inputs.targetBrowser }}' == 'chrome' ]; then
            BROWSER_VERSION=$(docker run --rm selenium/node-chrome:120.0 google-chrome-stable --version | awk "{print \$3}")
             echo "Google Chrome Browser Version: $BROWSER_VERSION"
          elif [ '${{ github.event.inputs.targetBrowser }}' == 'microsoftedge' ]; then
            BROWSER_VERSION=$(docker run --rm selenium/node-edge:4.16.1-20231212 microsoft-edge --version | awk "{print \$3}")
            echo "Microsoft Edge Browser Version: $BROWSER_VERSION"
          else
            echo "Browser not supported"
          fi

      - name: Check running containers
        run: docker ps

      - name: Install Java JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: 'maven'
          check-latest: true

      - name: Install Maven
        run: |
          sudo apt update
          sudo apt-get install -y maven
      - name: Check maven version
        run: mvn -version

      - name: Set proxy settings
        run: |
          mkdir -p ~/.m2
          cp ./configs/settings.xml ~/.m2/settings.xml
          cp ./configs/net.properties $JAVA_HOME/conf/

      - name: Run tests
        continue-on-error: true
        run: |
          if [ '${{ github.event.inputs.testsPath }}' == 'alpha' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${ALPHA_TESTS_PATH}"
          elif [ '${{ github.event.inputs.testsPath }}' == 'bravo' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${BRAVO_TESTS_PATH}"
          elif [ '${{ github.event.inputs.testsPath }}' == 'charlie' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${CHARLIE_TESTS_PATH}"
          elif [ '${{ github.event.inputs.testsPath }}' == 'delta' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${DELTA_TESTS_PATH}" -Dgroups="!eCare"
          elif [ '${{ github.event.inputs.testsPath }}' == 'delta_eCare' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${DELTA_TESTS_PATH}" -Dgroups="eCare"
          elif [ '${{ github.event.inputs.testsPath }}' == 'echo' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${ECHO_TESTS_PATH}"
          elif [ '${{ github.event.inputs.testsPath }}' == 'foxtrot' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${FOXTROT_TESTS_PATH}"
          elif [ '${{ github.event.inputs.testsPath }}' == 'golf' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${GOLF_TESTS_PATH}"
          elif [ '${{ github.event.inputs.testsPath }}' == 'hotel' ]; then
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${HOTEL_TESTS_PATH}"
          else
          mvn test -Dcom.SHAFT.proxySettings="172.31.58.254:3128" -DdriverProxySettings="true" -DexecutionAddress="localhost:4444" -DtargetOperatingSystem="LINUX" -DtargetBrowserName="${{ github.event.inputs.targetBrowser }}" -DheadlessExecution="true" -DgenerateAllureReportArchive="true" -DscreenshotParams_whenToTakeAScreenshot="FailuresOnly" -DcreateAnimatedGif="false" -Dtest="${{ github.event.inputs.testsPath }}"
          fi

      - name: Upload Allure Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Custom_Linux_Grid_Allure
          path: "generatedReport_*.zip"
      - name: Upload Execution Summary Report as Pipeline Artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: Custom_Linux_Grid_Summary
          path: "execution-summary/ExecutionSummaryReport_*.html"

      - name: Publish Test Results
        uses: VFDE-Digital-CloudandInfrastructure/dci-publish-unit-test-result-mirrored-action@v2
        if: always()
        with:
          check_name: "Custom_Linux_Grid Test Results"
          files: target/surefire-reports/TEST-*.xml
          
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: 3.8
#      - name: Send Mail
#        run: python3 send_mail.py
